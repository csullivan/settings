# -*-Sh-*-

export PYTHONPATH=$PYTHONPATH:~/pylib
DIR=$(dirname $(readlink -e ${BASH_SOURCE[0]}))
export PATH=$DIR/bin:.:~/.local/bin:~/bin:$PATH
export XENVIRONMENT=~/.Xresources

if ls /opt | grep emacs > /dev/null; then
   export PATH=$PATH:$(ls -d /opt/emacs-*/bin)
fi

if [ "$TERM" != "dumb" ]; then
    if [ -n "$TMUX" ]; then
        export TERM=screen-256color
    else
        export TERM=xterm-256color
    fi
fi

# Select a color for the user and server, random based on hostname.
if which pseudorandom_console_color.py > /dev/null; then
    export USER_COLOR=`pseudorandom_console_color.py $USER`
    export SERVER_COLOR=`pseudorandom_console_color.py $HOSTNAME`
else
    export USER_COLOR="1;32"
    export SERVER_COLOR="1;32"
fi
export PS1="\[\e[${USER_COLOR}m\]\u\[\e[1;32m\]@\[\e[${SERVER_COLOR}m\]\h\[\e[1;34m\] \w \$\[\e[m\] "

HISTSIZE=-1
HISTFILESIZE=-1

#Same thing, but for tmux.  Much more pleasant to work with.
alias dis='export $(tmux showenv | grep DISPLAY)'
alias tm='tmux new-session -A -s0'

tmux-attach() {
    OPTIND=1
    local session_name=""

    while getopts "t:" opt; do
	case $opt in
            t)
		session_name=$OPTARG
		;;
            \?)
		echo "Invalid option: -$OPTARG" >&2
		return 1
		;;
            :)
		echo "Option -$OPTARG requires an argument." >&2
		return 1
		;;
	esac
    done

    # Set DISPLAY for all panes
    if [ -n "$session_name" ]; then
	
        tmux list-panes -s -F '#{pane_id}' -t "$session_name" 2>/dev/null | while read pane; do
            current_command=$(tmux display-message -p -t "$pane" "#{pane_current_command}")
            if [[ "$current_command" == "bash" ]]; then
                tmux send-keys -t "$pane" "export DISPLAY=$DISPLAY" C-m
            elif [[ "$current_command" =~ "emacs" ]]; then
		tmux send-keys -t "$pane" "M-x"
		sleep 0.1
		tmux send-keys -t "$pane" "update-display-environment"
		sleep 0.1
		tmux send-keys -t "$pane" C-m
		sleep 0.1
		tmux send-keys -t "$pane" "$DISPLAY"
		sleep 0.1
		tmux send-keys -t "$pane" C-m
		sleep 0.1
            fi
        done
	
        # Attach to the session with specified name
        tmux attach -t "$session_name"
    else
        # Attach to the most recent session without specifying its name
        tmux attach
    fi
}


eval $(dircolors ~/.dir_colors)

open_emacs() {
    local literally=false
    local filename=""
    local flags=()   # To store flags

    # Process all arguments
    for arg in "$@"; do
        if [[ "$arg" == "-l" || "$arg" == "--literally" ]]; then
            literally=true
        elif [[ "$arg" == "-nwl" ]]; then
            literally=true
            flags+=("-nw")
        elif [[ "$arg" == -* ]]; then
            flags+=("$arg")  # Store flags like -nw
        else
            filename="$arg"
        fi
    done

    if $literally && [ -n "$filename" ]; then
        # Open file using find-file-literally
        emacsclient -a '' -c "${flags[@]}" -e "(find-file-literally \"$filename\")"
    elif [ -n "$filename" ]; then
        # Files provided, use them to open files or do other tasks
        emacsclient -a '' -c "${flags[@]}" "$filename"
    else
        # No files provided, or only flags provided, open iBuffer and kill other windows
        emacsclient -a '' -c "${flags[@]}" -e '(progn (ibuffer) (delete-other-windows))'
    fi
}


ec() {
    if [[ $1 == "--git-resolve" ]]; then
        # Check if we're in a git repo
        if git rev-parse --is-inside-work-tree &> /dev/null; then
            # Declare an array of conflict patterns
            declare -a conflict_patterns=("both modified:" "both added:" "both deleted:" "deleted by them:" "deleted by us:" "added by us:" "added by them:")

            # Initialize an empty array to store conflict files
            declare -a conflict_files=()

            # Iterate over each conflict pattern and collect filenames
            for pattern in "${conflict_patterns[@]}"; do
                while IFS= read -r line; do
                    conflict_files+=("$line")
                done < <(git status | grep "$pattern" | awk '{print $NF}')
            done

            if [ ${#conflict_files[@]} -gt 0 ]; then
                file_list=$(printf "%s," "${conflict_files[@]}")
                file_list=${file_list%,}  # Remove trailing comma
                emacsclient -e "(process-conflict-files-from-shell \"$file_list\")"
                open_emacs
            else
                echo "No conflict files found!"
                open_emacs
            fi
        else
            echo "You're not inside a git repository!"
        fi
    else
        open_emacs "$@"
    fi
}

# Get the most recent docker containers port with the image name provided
get_docker_port() {
    IMAGE_NAME=$1
    export PORT=$(docker ps | grep $IMAGE_NAME | awk '{print $1}' | xargs -I {} docker inspect -f '{{range $p, $conf := .NetworkSettings.Ports}}{{println $p "->" (index $conf 0).HostPort}}{{end}}' {} | grep '8080/tcp' | awk -F ' -> ' '{print $2}')
    echo "export PORT=$PORT; Done."
}

#alias emacs="emacs -nw"
#alias es="emacs --daemon"
# alias ec="emacsclient -a '' -c"
alias en="emacsclient -a '' -n"
export EDITOR="emacsclient -a '' -c -nw"

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls --color=auto'
alias ll='ls -lh'
alias lh='ls -ltrh'
alias lll='ll -a'
alias duh='du -d 1 -h --exclude "./.snapshot"'

alias grab_sconstruct='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/SConstruct'
alias grab_makefile='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/Makefile'
alias grab_ensure_venv='wget --no-cache https://raw.githubusercontent.com/Lunderberg/ensure_venv/master/ensure_venv.py'

export LESS="--no-init --quit-if-one-screen --raw-control-chars"
alias more="less"

alias root='root -l'
alias grep='grep --color=auto'
alias py2='ipython'
alias py3='ipython3'
alias py='ipython3'
alias pyx2='xterm -e ipython &'
alias pyx3='xterm -e ipython3 &'
alias pyx='xterm -e ipython3 &'
alias lynx='lynx --accept-all-cookies'
alias ssh='ssh -Y'
#alias scons='scons -U'
alias hamres='hamachi logoff; sleep 5; hamachi logon'
alias psgrep='ps aux | grep'

alias cd..="cd .."

# Extract symbols from .so file
alias symbols="nm --demangle --extern-only --dynamic"
alias undefined_symbols="ldd --function-relocs"

function addpath() {
    if [ $# -ge 1 ]; then
        export PATH=$1:$PATH
    else
        export PATH=`pwd`:$PATH
    fi
}

#Stop ^S from freezing the screen until ^Q is given.
stty -ixon 2> /dev/null

function show(){
    string=$(eval echo \$$1)
    old=$IFS
    IFS=:
    printf "%s\n" $string
    IFS=$old
}

#Things not in the github repo
if [ -f ~/.bash_private ]; then
    source ~/.bash_private
fi

command_not_found_handle() {
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found -- "$1"
        return $?
    else
        echo "Unknown command: $1"
        return 127
    fi
}

if which loginctl > /dev/null && loginctl >& /dev/null; then
    if loginctl show-user | grep KillUserProcesses | grep -q yes; then
        echo "systemd is set to kill user processes on logoff"
        echo "This will break screen, tmux, emacs --daemon, nohup, etc"
        echo "Tell the sysadmin to set KillUserProcesses=no in /etc/systemd/login.conf"
    fi
fi

# Git configurations
if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
else
    echo "Warning: Git auto-completion script not found!"
fi

alias lg='git log --all --decorate --oneline --graph --color'
alias gs='git status -u no'

# Prevent pip popup unnecessarily asking to unlock the "kdewallet"
# keyring.
#
# https://github.com/pypa/pip/issues/8090#issuecomment-803363268
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring



export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
export CUDACXX=/usr/local/cuda/bin/nvcc
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64

export TVM_HOME=$HOME/projects/tvm
export PYTHONPATH=$PYTHONPATH:$TVM_HOME/python
export PATH=$PATH:$HOME/settings/scripts:$HOME/settings/bin



# Triton Hopper env vars
export ENABLE_MMA_V3=1
export ENABLE_TMA=1 
export PATH=/opt/nvidia/nsight-systems/2024.4.1/bin/:$PATH

# Fix for pytorch pip package version of cublas not finding the jit libs
# export LD_LIBRARY_PATH=$HOME/path/to/my/venv3115/lib64/python3.11/site-packages/nvidia/nvjitlink/lib:$LD_LIBRARY_PATH
