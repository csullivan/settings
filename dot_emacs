;;; Initialize package management
(require 'package)

(add-to-list
 'package-archives
 '("melpa" . "https://melpa.org/packages/")
 t)

(package-initialize)

;; Init the list of package.  Only needs to be done once per
;; installation, but otherwise package-install will complain.
(unless package-archive-contents
  (message "Pulling package list from GNU ELPA/MELPA")
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (message "Installing use-package")
  (package-install 'use-package))

(setq use-package-always-ensure t)

;;; Basic keybinds
;; Configure C-h as backspace
(global-set-key (kbd "C-h") 'backward-delete-char)
;; Comment a region
(global-set-key (kbd "C-x ;") 'comment-or-uncomment-region)
;; Toggle line wrap
(global-set-key (kbd "C-x l") 'toggle-truncate-lines)
;; Look up symbol definitions
(global-set-key (kbd "C-c d") 'xref-find-definitions)
(global-set-key (kbd "C-c e") 'xref-find-definitions-other-window)


;;; Begin use-package configs

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;         Utility functions          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; XClip clipboard handling to copy emacs kill ring to host clipboard
;; Make sure to ssh into remote via ssh -X remote
(defun copy-to-xclip-clipboard ()
  (interactive)
  (let* ((data (if (region-active-p)
                   (buffer-substring-no-properties (region-beginning) (region-end))
                 (current-kill 0 t)))
         (display (shell-command-to-string "echo $DISPLAY"))
         (process-environment (cons (concat "DISPLAY=" (string-trim display)) process-environment)))
    (with-temp-buffer
      (insert data)
      (shell-command-on-region (point-min) (point-max) "xclip -selection clipboard"))))
(global-set-key (kbd "C-c c") 'copy-to-xclip-clipboard)


;; Function to update the display env var
;; used in conjuction with tmux to update
;; the display automatically on tmux attach
(defun update-display-environment ()
  "Prompt the user to update the DISPLAY environment variable."
  (interactive)
  (let ((new-value (read-string "Enter new value for DISPLAY: ")))
    (setenv "DISPLAY" new-value)
    (message "DISPLAY set to %s" new-value)))


;; From https://stackoverflow.com/a/24357106/2689797
(defun append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR"
  (declare (indent 1))
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
  (symbol-value list-var))


;; Initialize Helm
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  ;; Define TAB in helm-find-files-map
  (with-eval-after-load 'helm-files
    (define-key helm-find-files-map (kbd "TAB") 'helm-ff-RET))
)

;; Use Rebecca color theme
(use-package rebecca-theme
  :ensure t
  :config
  (load-theme 'rebecca t))

(use-package multiple-cursors
  :ensure t
  :bind (("C-c n" . mc/mark-next-like-this)
         ("C-c p" . mc/mark-previous-like-this))
  :config
  ;; Add any additional multiple-cursors configurations here
  )

(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode 1)
  :bind ("C-x u" . my-undo-tree-visualize-side-by-side)
  :config
  (defun my-undo-tree-visualize-side-by-side ()
    "Display undo-tree visualization side by side."
    (interactive)
    (let ((split-height-threshold nil)
          (split-width-threshold 0))
      (undo-tree-visualize))))

(use-package magit
  :ensure t
  :bind ("C-x C-g" . magit-status)
  ;; :config
  )

(use-package multi-term
  :ensure t
  :config
  (setq multi-term-program "/bin/bash") ;; Or whatever shell you prefer.
  :bind (("C-x t" . my-multi-term)))
  
(defun my-multi-term ()
  "Open multi-term in a split below."
  (interactive)
  (split-window-below)
  (windmove-down)
  (multi-term))

(defun term-check-exit ()
  "Close window when the term process exits."
  (when (not (process-live-p (get-buffer-process (current-buffer))))
    (delete-window)))

(add-hook 'term-exec-hook 'term-check-exit)


;; TVM FFI LSP language server configuration

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        LSP customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; For the TVM-specific langage server,
;; sudo pip3 install ffi-navigator

(use-package lsp-mode
  :ensure t
  :hook
  (c-mode-common . lsp)
  (python-mode . lsp)
  :init
  (setq lsp-keymap-prefix "C-c C-d")
  :config
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-signature-render-documentation nil)

  ;; TODO: Run the check for ffi-navigator asynchronously
  (when (= 0 (call-process-shell-command "pip3 list | grep ffi-navigator" nil nil nil))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection '("python3" "-m" "ffi_navigator.langserver"))
      :major-modes '(python-mode c++-mode)
      :server-id 'ffi-navigator
      :add-on? t))
    )
  )

(use-package lsp-ui
  :ensure t
  :config
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-progress-via-spinner nil)
  (setq lsp-progress-function 'ignore)
  )

;; Add python language server.  Version of jedi is to maintain
;; compatibility with IPython 7.13 (ubuntu 20.04's apt version).
;; Latest PyPI version of ipython is compability with latest jedi.

;; sudo pip3 install jedi-language-server "jedi<0.18.0"
(use-package lsp-jedi
  :ensure t)

;; LSP mode doesn't open lsp-progress-via-spinner in
;; lsp--spinner-start, can leave spinners running if a workspace takes
;; a while to initialize or has an error while initializing.  Revoking
;; all spinner privileges as a result.
(use-package "spinner"
   :defer t
   :config
   (defun spinner-start (&optional type-or-object fps delay)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        C++ customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; For LSP integration, for each project, either add these commands to
;; CMakeLists.txt, or compile with `cmake
;; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..`

;; Or, in CMakeLists.txt
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
;; # Also needed for cmake<3.18.0 (https://gitlab.kitware.com/cmake/cmake/-/issues/16588)
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")

;; Or, with cmake>=3.17, can set environment variable
;; export CMAKE_EXPORT_COMPILE_COMMANDS=ON

;; Ubuntu 20.04's apt has clangd 10.0, which doesn't look in build
;; subdir for compile_commands.json.  Can symlink to
;; build/compile_commands.json, but I'm lazy so I download clangd 13.0
;; in the settings/install.py



;; Find-file configurations

(use-package find-file
  :ensure t
  :config
  (setq-default ff-always-in-other-window nil)
  (setq cc-search-directories
        '("." "../src" "../include" "src" "include" "/usr/include"
          "./*/include" "../include/*" "../include/*/detail"
          "../../src" "../../include"
          "../../../src" "../libraries/*"
          "../../../include" "../libraries/*/*"
          "../../*/include" "../../*/src" "../*/*/src"
          ))
  (setq cc-other-file-alist
        '(("\\.cc\\'" (".hh" ".h"))
          ("\\.hh\\'" (".cc" ".C" ".cxx" ".cu"))
          ("\\.c\\'" (".h"))
          ("\\.h\\'" (".cxx" ".c" ".cc" ".C" ".CC" ".cpp" ".cu"))
          ("\\.C\\'" (".H" ".hh" ".h"))
          ("\\.H\\'" (".C" ".CC"))
          ("\\.CC\\'" (".HH" ".H" ".hh" ".h"))
          ("\\.HH\\'" (".CC"))
          ("\\.c\\+\\+\\'" (".h++" ".hh" ".h"))
          ("\\.h\\+\\+\\'" (".c++"))

          ("\\.cu\\'" (".hh" ".h"))
          ("\\.cuh\\'" (".cu"))
          ("\\.cpp\\'" (".hpp" ".hh" ".h"))
          ("\\.hpp\\'" (".cpp"))
          ("\\.cxx\\'" (".h" ".hxx" ".hh"))
          ("\\.hxx\\'" (".cxx"))
          ))
  )

;; Auto formatting for c-lang files
(defconst my-c-style
  '((c-electric-pound-behavior . 'alignleft)

    (c-basic-offset . 2)

    (c-tab-always-indent . t)

    (indent-tabs-mode . nil)

    (c-hanging-braces-alist . ((block-open after)
                               (substatement-open after)
                               (substatement-close)
                               (brace-list-open)
                               (substatement-open)
                               (class-open after)
                               (defun-open after)
                               (defun-close)
                               ))

    (c-hanging-colons-alist . ((member-init-intro before)
                               (inher-intro)
                               (case-label after)
                               (access-label after)
                               (label after)))

    (c-cleanup-list . (scope-operator
                       defun-close-semi
                       brace-else-brace
                       brace-elseif-brace
                       brace-catch-brace))

    (c-offsets-alist . ((arglist-close . c-lineup-arglist)
                        (arglist-intro . +)
                        (arglist-close . 0)
                        (case-label . +)
                        (statement-case-intro . +)
                        (inclass . +)
                        (access-label . -)
                        (label . -)
                        (substatement-open . 0)
                        (innamespace . [0])
                        (block-open . 0)))
    )
  "My C++/C Programming Style")

(use-package cc-mode
  :ensure nil
  :mode ("\\.h$" . c++-mode)
  :bind (:map c-mode-base-map
              ("C-c C-f" . ff-find-other-file)
              ("C-j" . newline-and-indent)
              ;; ("C-c C-c" . find-makefile-compile)
	      )

  :config
  (c-toggle-auto-newline -1)
  (c-toggle-hungry-state -1)
  (c-add-style "my-c-lang-style" my-c-style)
  (add-to-list 'c-default-style '(c-mode . "my-c-lang-style"))
  (add-to-list 'c-default-style '(c++-mode . "my-c-lang-style"))
  (add-to-list 'c-default-style '(cuda-mode . "my-c-lang-style"))
  )

(use-package lsp-clangd
  :ensure nil
  :config
  (setq lsp-clients-clangd-args
        (append-to-list `lsp-clients-clangd-args '("--query-driver=/usr/bin/**"))))

(use-package cuda-mode
  :ensure t
  :load-path "misc"
  :mode ("\\.cu$" "\\.cuh$"))

(use-package clang-format+
  :hook (c-mode-common . clang-format+-mode))

;; Go to previous buffer
(use-package winner
  :ensure t  ; Ensure winner is installed (it should be as it's part of Emacs by default, but this is here for completeness)
  :init
  (winner-mode 1)  ; Enable winner-mode globally
  :bind
  ("C-c r" . winner-undo)
  ("C-c f" . winner-redo)
  )

;; TODO(csullivan): figure out what is using the GPU
;; UniteAI lsp config https://github.com/freckletonj/uniteai
;; (load-file "~/.emacs.d/unite_ai_lsp_mode_config.el")

;; Automatically format python buffers
(use-package blacken
  :ensure t
  :hook (python-mode . blacken-mode))

;;; End use-package configs


;;; Support --git-resolve on emacsclient which opens all files in a git
;;; repo that have conflicts that need resolution and marks them in the
;;; BufferList for resolution with the prefix CONFLICT:

(defun process-conflict-files-from-shell (file-str)
  "Process a comma-separated string of filenames FILE-STR."
  (message "Received file list: %s" file-str)
  (let ((file-list (split-string file-str ",")))
    (message "Processed file list: %s" file-list)
    (process-conflict-files file-list)))


(defun process-conflict-files (file-list)
  "Open each file in FILE-LIST and mark it as a conflict buffer."
  (dolist (file-path file-list)
    (with-current-buffer (get-buffer-create file-path)
      (set (make-local-variable 'conflict-buffer) t)
      (unless (file-exists-p file-path)
        (insert (format "File not found: %s" file-path))))))

;; Adjust buffer list ordering to prioritize conflict buffers
(defun conflict-first-buffer-menu ()
  (setq tabulated-list-entries
        (sort tabulated-list-entries
              (lambda (a b)
                (let* ((buf-a (find-buffer-visiting (aref (cadr a) 3)))
                       (buf-b (find-buffer-visiting (aref (cadr b) 3)))
                       (conflict-a (and buf-a (buffer-local-value 'conflict-buffer buf-a)))
                       (conflict-b (and buf-b (buffer-local-value 'conflict-buffer buf-b))))
                  (and conflict-a (not conflict-b)))))))

(add-hook 'buffer-menu-mode-hook 'conflict-first-buffer-menu)

;; TODO(csullivan) update this to sort the helm-buffer-list
(require 'seq)
(defun sort-conflict-buffers-first ()
  "Sort conflict buffers to the top of the buffer list."
  (let ((conflict-bufs (sort (seq-filter (lambda (buf)
                                           (buffer-local-value 'conflict-buffer buf))
                                         (buffer-list))
                             (lambda (a b) (string< (buffer-name a) (buffer-name b)))))
        (non-conflict-bufs (sort (seq-filter (lambda (buf)
                                               (not (buffer-local-value 'conflict-buffer buf)))
                                             (buffer-list))
                                 (lambda (a b) (string< (buffer-name a) (buffer-name b))))))
    (dolist (buf non-conflict-bufs)
      (bury-buffer buf))
    (dolist (buf conflict-bufs)
      (switch-to-buffer buf t t))))


(defun process-conflict-files (file-list)
  "Open each file in FILE-LIST and mark it as a conflict buffer."
  (dolist (file-path file-list)
    (with-current-buffer (find-file-noselect file-path)
      (set (make-local-variable 'conflict-buffer) t)
      (unless (string-prefix-p "CONFLICT: " (buffer-name))
        (rename-buffer (concat "CONFLICT: " (buffer-name)))))
  )
  (sort-conflict-buffers-first)
)



(defun conflict-buffers-face (id cols)
  (let ((buffer (find-buffer-visiting (aref cols 3))))
    (if (and buffer (buffer-local-value 'conflict-buffer buffer))
        '(:background "yellow")
      nil)))

(add-to-list 'tabulated-list-format
             '("Buffer" 22 t nil nil nil conflict-buffers-face))




;;;;;;;
;; Define the mode and its keymap
(defvar link-highlight-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<mouse-1>") 'link-highlight-click)
    map)
  "Keymap for `link-highlight-mode`.")

;; Syntax highlighting
(defvar link-highlight-font-lock-keywords
  `(
    (, (concat "File \"\\([^\"]+\\.cc\\|[^\"]+\\.py\\)\", line \\([0-9]+\\)") . (1 font-lock-keyword-face))
    (, (concat "\"\\([^\"]+\\.cc\\|[^\"]+\\.py\\):\\([0-9]+\\):") . (1 font-lock-string-face))
    (, (concat "'\\([^']+\\.cc\\|[^']+\\.py\\):\\([0-9]+\\)'") . (1 font-lock-function-name-face))
    (, (concat "'\\([^']+\\.cc\\|[^']+\\.py\\):\\([0-9]+\\)'") . (1 font-lock-constant-face))
   )
  "Highlighting expressions for `link-highlight-mode`.")

;; Major mode definition
(define-derived-mode link-highlight-mode fundamental-mode "LinkHighlight"
  "Major mode to highlight and open file paths."
  (setq font-lock-defaults '((link-highlight-font-lock-keywords))))

(defun parse-and-extract (line)
  "Parse the LINE and extract file paths and line numbers."
  (let ((patterns '(
                    "File \"\\([^\"]+\\.cc\\|[^\"]+\\.py\\)\", line \\([0-9]+\\)"
                    "\"\\([^\"]+\\.cc\\|[^\"]+\\.py\\):\\([0-9]+\\):"
                    "'\\([^']+\\.cc\\|[^']+\\.py\\):\\([0-9]+\\)'"
                    "\"\\([^\"]+\\.cc\\|[^\"]+\\.py\\)\":\\s-"
                    ))
        matches)
    (dolist (pattern patterns)
      (let ((match (string-match pattern line)))
        (when match
          (setq matches (append matches (list (list (match-string 1 line) (match-string 2 line))))))))
    matches))

(defun link-highlight-open-at-point ()
  "Open the file and navigate to the line number based on the current cursor position."
  (interactive)
  (let ((line (thing-at-point 'line t)))
    (message "Trying to parse line: %s" line)
    (dolist (match (parse-and-extract line))
      (message "Matched file: %s, line: %s" (car match) (cadr match))
      (let ((file (car match))
            (line-number (cadr match)))
        (when file
          (find-file file)
          (when line-number
            (goto-line (string-to-number line-number))))))))

;; Bind the function to a key within link-highlight-mode
(define-key link-highlight-mode-map (kbd "C-c o") 'link-highlight-open-at-point)


;; Add to the list of modes
(add-to-list 'auto-mode-alist '("\\.lh\\'" . link-highlight-mode))

;; Enable truncate lines in fundamental mode for python files
;; This is helpful for opening large TVM IRModule python buffers
(defun my-enable-truncate-lines-for-literal ()
  "Enable `truncate-lines` for buffers opened with `find-file-literally`."
  (when (and (eq major-mode 'fundamental-mode)
             (string-match-p "\\.py\\'" (or (buffer-file-name) "")))
    (setq truncate-lines t)))

(add-hook 'after-change-major-mode-hook 'my-enable-truncate-lines-for-literal)





;;;;;;; Auto generated

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(magit undo-tree rebecca-theme use-package helm)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
